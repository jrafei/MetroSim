package simulation

import (
	"fmt"
	"log"

	//"math/rand"
	alg "metrosim/internal/algorithms"
	"sync"
	"time"
)

// Déclaration de la matrice
/*
 * X : Mur, zone inatteignable
 * E : Entrée
 * S : Sortie
 * W : Entrée et Sortie
 * Q : Voie
 * _ : Couloir, case libre
 * B: Bridge/Pont, zone accessible
 */
var carte [20][20]string = [20][20]string{
	{"X", "X", "X", "X", "X", "X", "X", "X", "W", "W", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X"},
	{"X", "X", "X", "X", "X", "X", "X", "X", "_", "_", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X"},
	{"X", "X", "X", "X", "X", "X", "X", "X", "_", "_", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X"},
	{"X", "X", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "X", "X"},
	{"X", "X", "_", "X", "X", "X", "X", "X", "_", "_", "X", "X", "X", "X", "X", "X", "X", "_", "X", "X"},
	{"X", "X", "_", "X", "X", "X", "X", "X", "_", "_", "X", "X", "X", "X", "X", "X", "X", "_", "X", "X"},
	{"X", "X", "_", "X", "X", "X", "X", "X", "_", "_", "X", "X", "X", "X", "X", "X", "_", "_", "_", "X"},
	{"_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"},
	{"_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "X", "_"},
	{"Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "B", "B"},
	{"Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "B", "B"},
	{"Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "B", "B"},
	{"Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "Q", "B", "B"},
	{"_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"},
	{"_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"},
	{"X", "X", "X", "X", "X", "X", "X", "X", "_", "_", "X", "X", "X", "X", "X", "X", "X", "X", "X", "X"},
	{"X", "X", "X", "X", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "X", "X", "X", "X", "X"},
	{"X", "X", "X", "X", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "X", "X", "X", "X", "X"},
	{"X", "X", "X", "X", "_", "_", "X", "X", "X", "X", "X", "X", "_", "_", "X", "X", "X", "X", "X", "X"},
	{"X", "X", "X", "X", "S", "S", "X", "X", "X", "X", "X", "X", "E", "E", "X", "X", "X", "X", "X", "X"},
}

var zonesCarte map[Coord]ZoneID = map[Coord]ZoneID{
	{0, 0}: 1, {0, 1}: 1, {0, 2}: 1, {0, 3}: 1, {0, 4}: 1, {0, 5}: 1, {0, 6}: 1, {0, 7}: 1, {0, 8}: 1, {0, 9}: 1,
	{1, 0}: 1, {1, 1}: 1, {1, 2}: 1, {1, 3}: 1, {1, 4}: 1, {1, 5}: 1, {1, 6}: 1, {1, 7}: 1, {1, 8}: 1, {1, 9}: 1,
	{2, 0}: 1, {2, 1}: 1, {2, 2}: 1, {2, 3}: 1, {2, 4}: 1, {2, 5}: 1, {2, 6}: 1, {2, 7}: 1, {2, 8}: 1, {2, 9}: 1,
	{3, 0}: 1, {3, 1}: 1, {3, 2}: 1, {3, 3}: 1, {3, 4}: 1, {3, 5}: 1, {3, 6}: 1, {3, 7}: 1, {3, 8}: 1, {3, 9}: 1,
	{4, 0}: 1, {4, 1}: 1, {4, 2}: 1, {4, 3}: 1, {4, 4}: 1, {4, 5}: 1, {4, 6}: 1, {4, 7}: 1, {4, 8}: 1, {4, 9}: 1,
	{5, 0}: 1, {5, 1}: 1, {5, 2}: 1, {5, 3}: 1, {5, 4}: 1, {5, 5}: 1, {5, 6}: 1, {5, 7}: 1, {5, 8}: 1, {5, 9}: 1,
	{6, 0}: 1, {6, 1}: 1, {6, 2}: 1, {6, 3}: 1, {6, 4}: 1, {6, 5}: 1, {6, 6}: 1, {6, 7}: 1, {6, 8}: 1, {6, 9}: 1,
	{7, 0}: 1, {7, 1}: 1, {7, 2}: 1, {7, 3}: 1, {7, 4}: 1, {7, 5}: 1, {7, 6}: 1, {7, 7}: 1, {7, 8}: 1, {7, 9}: 1,
	{8, 0}: 1, {8, 1}: 1, {8, 2}: 1, {8, 3}: 1, {8, 4}: 1, {8, 5}: 1, {8, 6}: 1, {8, 7}: 1, {8, 8}: 1, {8, 9}: 1,
	{9, 0}: 1, {9, 1}: 1, {9, 2}: 1, {9, 3}: 1, {9, 4}: 1, {9, 5}: 1, {9, 6}: 1, {9, 7}: 1, {9, 8}: 1, {9, 9}: 1,
	{0, 10}: 2, {0, 11}: 2, {0, 12}: 2, {0, 13}: 2, {0, 14}: 2, {0, 15}: 2, {0, 16}: 2, {0, 17}: 2, {0, 18}: 2, {0, 19}: 2,
	{1, 10}: 2, {1, 11}: 2, {1, 12}: 2, {1, 13}: 2, {1, 14}: 2, {1, 15}: 2, {1, 16}: 2, {1, 17}: 2, {1, 18}: 2, {1, 19}: 2,
	{2, 10}: 2, {2, 11}: 2, {2, 12}: 2, {2, 13}: 2, {2, 14}: 2, {2, 15}: 2, {2, 16}: 2, {2, 17}: 2, {2, 18}: 2, {2, 19}: 2,
	{3, 10}: 2, {3, 11}: 2, {3, 12}: 2, {3, 13}: 2, {3, 14}: 2, {3, 15}: 2, {3, 16}: 2, {3, 17}: 2, {3, 18}: 2, {3, 19}: 2,
	{4, 10}: 2, {4, 11}: 2, {4, 12}: 2, {4, 13}: 2, {4, 14}: 2, {4, 15}: 2, {4, 16}: 2, {4, 17}: 2, {4, 18}: 2, {4, 19}: 2,
	{5, 10}: 2, {5, 11}: 2, {5, 12}: 2, {5, 13}: 2, {5, 14}: 2, {5, 15}: 2, {5, 16}: 2, {5, 17}: 2, {5, 18}: 2, {5, 19}: 2,
	{6, 10}: 2, {6, 11}: 2, {6, 12}: 2, {6, 13}: 2, {6, 14}: 2, {6, 15}: 2, {6, 16}: 2, {6, 17}: 2, {6, 18}: 2, {6, 19}: 2,
	{7, 10}: 2, {7, 11}: 2, {7, 12}: 2, {7, 13}: 2, {7, 14}: 2, {7, 15}: 2, {7, 16}: 2, {7, 17}: 2, {7, 18}: 2, {7, 19}: 2,
	{8, 10}: 2, {8, 11}: 2, {8, 12}: 2, {8, 13}: 2, {8, 14}: 2, {8, 15}: 2, {8, 16}: 2, {8, 17}: 2, {8, 18}: 2, {8, 19}: 2,
	{9, 10}: 2, {9, 11}: 2, {9, 12}: 2, {9, 13}: 2, {9, 14}: 2, {9, 15}: 2, {9, 16}: 2, {9, 17}: 2, {9, 18}: 2, {9, 19}: 2,
	{10, 0}: 3, {10, 1}: 3, {10, 2}: 3, {10, 3}: 3, {10, 4}: 3, {10, 5}: 3, {10, 6}: 3, {10, 7}: 3, {10, 8}: 3, {10, 9}: 3,
	{11, 0}: 3, {11, 1}: 3, {11, 2}: 3, {11, 3}: 3, {11, 4}: 3, {11, 5}: 3, {11, 6}: 3, {11, 7}: 3, {11, 8}: 3, {11, 9}: 3,
	{12, 0}: 3, {12, 1}: 3, {12, 2}: 3, {12, 3}: 3, {12, 4}: 3, {12, 5}: 3, {12, 6}: 3, {12, 7}: 3, {12, 8}: 3, {12, 9}: 3,
	{13, 0}: 3, {13, 1}: 3, {13, 2}: 3, {13, 3}: 3, {13, 4}: 3, {13, 5}: 3, {13, 6}: 3, {13, 7}: 3, {13, 8}: 3, {13, 9}: 3,
	{14, 0}: 3, {14, 1}: 3, {14, 2}: 3, {14, 3}: 3, {14, 4}: 3, {14, 5}: 3, {14, 6}: 3, {14, 7}: 3, {14, 8}: 3, {14, 9}: 3,
	{15, 0}: 3, {15, 1}: 3, {15, 2}: 3, {15, 3}: 3, {15, 4}: 3, {15, 5}: 3, {15, 6}: 3, {15, 7}: 3, {15, 8}: 3, {15, 9}: 3,
	{16, 0}: 3, {16, 1}: 3, {16, 2}: 3, {16, 3}: 3, {16, 4}: 3, {16, 5}: 3, {16, 6}: 3, {16, 7}: 3, {16, 8}: 3, {16, 9}: 3,
	{17, 0}: 3, {17, 1}: 3, {17, 2}: 3, {17, 3}: 3, {17, 4}: 3, {17, 5}: 3, {17, 6}: 3, {17, 7}: 3, {17, 8}: 3, {17, 9}: 3,
	{18, 0}: 3, {18, 1}: 3, {18, 2}: 3, {18, 3}: 3, {18, 4}: 3, {18, 5}: 3, {18, 6}: 3, {18, 7}: 3, {18, 8}: 3, {18, 9}: 3,
	{19, 0}: 3, {19, 1}: 3, {19, 2}: 3, {19, 3}: 3, {19, 4}: 3, {19, 5}: 3, {19, 6}: 3, {19, 7}: 3, {19, 8}: 3, {19, 9}: 3,
	{10, 10}: 4, {10, 11}: 4, {10, 12}: 4, {10, 13}: 4, {10, 14}: 4, {10, 15}: 4, {10, 16}: 4, {10, 17}: 4, {10, 18}: 4, {10, 19}: 4,
	{11, 10}: 4, {11, 11}: 4, {11, 12}: 4, {11, 13}: 4, {11, 14}: 4, {11, 15}: 4, {11, 16}: 4, {11, 17}: 4, {11, 18}: 4, {11, 19}: 4,
	{12, 10}: 4, {12, 11}: 4, {12, 12}: 4, {12, 13}: 4, {12, 14}: 4, {12, 15}: 4, {12, 16}: 4, {12, 17}: 4, {12, 18}: 4, {12, 19}: 4,
	{13, 10}: 4, {13, 11}: 4, {13, 12}: 4, {13, 13}: 4, {13, 14}: 4, {13, 15}: 4, {13, 16}: 4, {13, 17}: 4, {13, 18}: 4, {13, 19}: 4,
	{14, 10}: 4, {14, 11}: 4, {14, 12}: 4, {14, 13}: 4, {14, 14}: 4, {14, 15}: 4, {14, 16}: 4, {14, 17}: 4, {14, 18}: 4, {14, 19}: 4,
	{15, 10}: 4, {15, 11}: 4, {15, 12}: 4, {15, 13}: 4, {15, 14}: 4, {15, 15}: 4, {15, 16}: 4, {15, 17}: 4, {15, 18}: 4, {15, 19}: 4,
	{16, 10}: 4, {16, 11}: 4, {16, 12}: 4, {16, 13}: 4, {16, 14}: 4, {16, 15}: 4, {16, 16}: 4, {16, 17}: 4, {16, 18}: 4, {16, 19}: 4,
	{17, 10}: 4, {17, 11}: 4, {17, 12}: 4, {17, 13}: 4, {17, 14}: 4, {17, 15}: 4, {17, 16}: 4, {17, 17}: 4, {17, 18}: 4, {17, 19}: 4,
	{18, 10}: 4, {18, 11}: 4, {18, 12}: 4, {18, 13}: 4, {18, 14}: 4, {18, 15}: 4, {18, 16}: 4, {18, 17}: 4, {18, 18}: 4, {18, 19}: 4,
	{19, 10}: 4, {19, 11}: 4, {19, 12}: 4, {19, 13}: 4, {19, 14}: 4, {19, 15}: 4, {19, 16}: 4, {19, 17}: 4, {19, 18}: 4, {19, 19}: 4,
}

var panneauxCarte map[ZoneID][]alg.Node = map[ZoneID][]alg.Node{
	// Placement des panneaux d'orientation
	// Besoin des coordonnées et de l'heuristique de départ (pour choisir vers quel panneau aller (exemple, la distance jusqu'à la dest))
	1: {*alg.NewNode(7, 11, 0, 1, 0, 0), *alg.NewNode(14, 11, 0, 10, 0, 0), *alg.NewNode(9, 5, 0, 7, 0, 0), *alg.NewNode(14, 15, 0, 15, 0, 0)},
	2: {*alg.NewNode(14, 11, 0, 5, 0, 0), *alg.NewNode(10, 19, 0, 1, 0, 0), *alg.NewNode(14, 15, 0, 7, 0, 0)},
	3: {*alg.NewNode(7, 11, 0, 10, 0, 0), *alg.NewNode(10, 19, 0, 5, 0, 0), *alg.NewNode(4, 11, 0, 15, 0, 0)},
	4: {*alg.NewNode(7, 11, 0, 10, 0, 0), *alg.NewNode(10, 19, 0, 5, 0, 0)},
}

var playground [20][20]string = [20][20]string{
	{"_", "X", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"},
	{"_", "X", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"},
	{"_", "X", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"},
	{"_", "X", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"},
	{"_", "X", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"},
	{"_", "X", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"},
	{"_", "X", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"},
	{"_", "X", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"},
	{"_", "X", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"},
	{"_", "X", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"},
	{"_", "X", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"},
	{"_", "X", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"},
	{"_", "X", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"},
	{"_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"},
	{"_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"},
	{"_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"},
	{"_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"},
	{"_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"},
	{"_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"},
	{"_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_", "_"},
}

type Simulation struct {
	env         Environment
	agents      []Agent
	maxStep     int
	maxDuration time.Duration
	step        int // Stats
	start       time.Time
	syncChans   sync.Map
}

func (sim *Simulation) Env() *Environment {
	return &sim.env
}

func NewSimulation(agentCount int, maxStep int, maxDuration time.Duration) (simu *Simulation) {
	simu = &Simulation{}
	simu.agents = make([]Agent, 0, agentCount)
	simu.maxStep = maxStep
	simu.maxDuration = maxDuration

	// Communication entre agents
	mapChan := make(map[AgentID]chan AgentID)
	simu.env = *NewEnvironment([]Agent{}, carte, mapChan)
	//simu.env = *NewEnvironment([]Agent{}, playground, mapChan,zonesCarte, panneauxCarte)

	// création des agents et des channels
	for i := 0; i < agentCount; i++ {
		// création de l'agent
		id := fmt.Sprintf("Agent #%d", i)
		syncChan := make(chan int)
		//ag := NewAgent(id, &simu.env, syncChan, time.Duration(time.Second), 0, true, Coord{0, 8 + i%2}, Coord{0, 8 + i%2}, &UsagerLambda{}, Coord{0, 8 + i%2}, Coord{12 - 4*(i%2), 18 - 15*(i%2)})

		//ag := NewAgent(id, &simu.env, syncChan, 1000, 0, true, &UsagerLambda{}, Coord{3, 4}, Coord{18, 12}, 2, 1)
		ag := &Agent{}
		if i%2==0{
			ag = NewAgent(id, &simu.env, syncChan, 1000, 0, true, &UsagerLambda{}, Coord{18, 4}, Coord{0, 8}, 2, 1)
		}else{
			ag = NewAgent(id, &simu.env, syncChan, 1000, 0, true, &UsagerLambda{}, Coord{1, 8}, Coord{8, 5}, 1, 1)
		}

		//ag := NewAgent(id, &simu.env, syncChan, 1000, 0, true, &UsagerLambda{}, Coord{1, 17}, Coord{0, 0}, 2, 1)

		// ajout de l'agent à la simulation
		simu.agents = append(simu.agents, *ag)

		// ajout du channel de synchro
		simu.syncChans.Store(ag.ID(), syncChan)

		// ajout de l'agent à l'environnement
		ag.env.AddAgent(*ag)

		// ajout
		simu.env.agentsChan[ag.id] = make(chan AgentID)
	}

	return simu
}

func (simu *Simulation) Run() {
	log.Printf("Démarrage de la simulation [step: %d, π: %f]", simu.step, simu.env.PI())

	// Démarrage du micro-service de Log
	go simu.Log()
	// Démarrage du micro-service d'affichage
	go simu.Print()

	// Démarrage des agents

	var wg sync.WaitGroup
	for _, agt := range simu.agents {
		wg.Add(1)
		go func(agent Agent) {
			defer wg.Done()
			agent.Start()
		}(agt)
	}

	// On sauvegarde la date du début de la simulation
	simu.start = time.Now()

	// Lancement de l'orchestration de tous les agents
	// simu.step += 1 // plus de sens
	for _, agt := range simu.agents {
		go func(agt Agent) {
			step := 0
			for {
				step++
				c, _ := simu.syncChans.Load(agt.ID())
				c.(chan int) <- step             // /!\ utilisation d'un "Type Assertion"
				time.Sleep(1 * time.Millisecond) // "cool down"
				<-c.(chan int)
			}
		}(agt)
	}

	time.Sleep(simu.maxDuration)

	log.Printf("Fin de la simulation [step: %d, in: %d, out: %d, π: %f]", simu.step, simu.env.PI())
}

func (simu *Simulation) Print() {
	for {
		for i := 0; i < 20; i++ {
			fmt.Println(simu.env.station[i])
		}
		//time.Sleep(time.Second / 4) // 60 fps !
		time.Sleep(500 * time.Millisecond) // 1 fps !
		//fmt.Print("\033[H\033[2J") // effacement du terminal
	}
}

func (simu *Simulation) Log() {
	// Not implemented
}
